import java.nio.file.Files
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING

apply plugin: 'base'
apply plugin: 'java'
apply plugin: 'idea'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.12'

    compile 'com.microsoft.azure:azure-eventhubs:3.2.0'
    compile 'com.microsoft.azure:qpid-proton-j-extensions:1.1.0'
    compile 'com.microsoft.azure:azure-eventhubs-eph:3.2.0'
    compile 'com.microsoft.azure:azure-storage:8.6.5'
    runtime 'com.google.code.gson:gson:2.8.5'
    runtime 'org.apache.qpid:proton-j:0.33.3'
    compile 'org.apache.logging.log4j:log4j-api:2.9.1'
    runtime 'org.apache.logging.log4j:log4j-slf4j-impl:2.9.1'
}


task generateGemJarRequiresFile {
    doLast {
        File jars_file = file('lib/logstash-input-azure_event_hubs.rb')
        jars_file.newWriter().withWriter { w ->
            w << "# AUTOGENERATED BY THE GRADLE SCRIPT. DO NOT EDIT.\n\n"
            w << "require \'jar_dependencies\'\n"
            configurations.runtime.allDependencies.each {
                logger.info('generateGemJarRequiresFile - group: {}, name: {}, version: {}', it.group, it.name, it.version)
                w << "require_jar(\'${it.group}\', \'${it.name}\', \'${it.version}\')\n"
            }
        }
    }
}

task vendor {
    doLast {
        String vendorPathPrefix = "vendor/jar-dependencies"
        configurations.runtime.allDependencies.each { dep ->

            logger.info('vendor - group: {}, name: {}, version: {}', dep.group, dep.name, dep.version)

            String groupPath = dep.group.replaceAll('\\.', '/')
            File newJarFile = file("${vendorPathPrefix}" + File.separator + "${groupPath}" + File.separator + "${dep.name}"+ File.separator + "${dep.version}" + File.separator + "${dep.name}-${dep.version}.jar")
            newJarFile.mkdirs()

            String jarPath = "${dep.group}" + File.separator + "${dep.name}" + File.separator + "${dep.version}"
            logger.info(jarPath)

            File f = configurations.runtime.filter { it.absolutePath.contains(jarPath) }.singleFile
            Files.copy(f.toPath(), newJarFile.toPath(), REPLACE_EXISTING)

            // findJarsByGroup(configurations.runtime, dep.group).each { jar ->
            //     logging.info(jar.toPath().toString())
            //     logging.info(newJarFile.toPath().toString())
            //     Files.copy(jar.toPath(), newJarFile.toPath(), REPLACE_EXISTING)
            // }
            // from findJarsByGroup(configurations.runtime, dep.group)
            // into newJarFile.toPath()
        }
    }
}

task copyToLib(type: Copy) {

}

def findJarsByGroup(Configuration config, groupName) {
  config.files { it.group.equals(groupName) }
}

def findJar(prefix) { 
    configurations.runtime.filter { it.name.startsWith(prefix) }
}

vendor.dependsOn(generateGemJarRequiresFile)

